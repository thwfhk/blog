<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell | </title>
    <link>thwfhk.github.io/tag/haskell/</link>
      <atom:link href="thwfhk.github.io/tag/haskell/index.xml" rel="self" type="application/rss+xml" />
    <description>Haskell</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 25 Aug 2020 17:43:42 +0800</lastBuildDate>
    <image>
      <url>/thwfhk.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Haskell</title>
      <link>thwfhk.github.io/tag/haskell/</link>
    </image>
    
    <item>
      <title>区分一些Higher-order开头的词</title>
      <link>thwfhk.github.io/post/higher_order_xxx/</link>
      <pubDate>Tue, 25 Aug 2020 17:43:42 +0800</pubDate>
      <guid>thwfhk.github.io/post/higher_order_xxx/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;某种意义上，高阶意味着一等公民（&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在阅读PL相关的论文以及函数式语言的相关资料的时候，经常会看到&amp;quot;&lt;strong&gt;higher-order xxx&lt;/strong&gt;&amp;ldquo;或者&amp;rdquo;&lt;strong&gt;higher-xxx yyy&lt;/strong&gt;&amp;ldquo;这种格式的词语，仿佛是一切东西前面都能加个higher-order。我时常分不清他们的含义，于是我想从语言的角度总结一下各种higher/higher-order开头的词语。可以发现他们之间还是很相似的。&lt;/p&gt;
&lt;h2 id=&#34;higher-order-functions&#34;&gt;Higher-order Functions&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;higher-order function&lt;/strong&gt; 指接受函数作为参数的函数（有时候返回函数的函数也算），比如&lt;code&gt;map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果我们把type写成一棵语法树，可以对于higher-order function的type，它从根走到某个$(a\to b)$的路径上至少有一次是&lt;strong&gt;走了某个$\to$节点的左边&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在支持higher-order function的语言中，函数是&lt;strong&gt;一等公民（first-class citizen）&lt;/strong&gt;，也就是说函数可以作为参数传递。严格来说一等公民还应该支持赋值、存储等操作，但我觉得已经支持作为参数传递和返回了，其他的应该也都支持（纯粹的函数式语言不在意这些🐶）。&lt;/p&gt;
&lt;p&gt;如果出现&lt;strong&gt;higher-order language&lt;/strong&gt;这个词，一般指支持higher-order function的语言。&lt;/p&gt;
&lt;p&gt;对应的lambda calculus的例子：simply typed lambda calculus $\lambda_\to$.&lt;/p&gt;
&lt;h2 id=&#34;higher-order-type-operators&#34;&gt;Higher-order Type (Operators)&lt;/h2&gt;
&lt;p&gt;首先简单介绍一下关于type operator和kind的前置知识：&lt;/p&gt;
&lt;p&gt;我们想要讨论&lt;strong&gt;type-level functions&lt;/strong&gt; (or &lt;strong&gt;type operators&lt;/strong&gt;, type constructors), 比如&lt;code&gt;Ref T&lt;/code&gt; , &lt;code&gt;Pair S T&lt;/code&gt;等等。因此在type层面引入了abstraction $\lambda X::K.T$ 和application $T\ T$。这样就有了type operators。&lt;/p&gt;
&lt;p&gt;为了从arity上区分type (operators)，我们引入&lt;strong&gt;kinds&lt;/strong&gt; (the types of types):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a single atomic kind $*$ (pronounced &amp;ldquo;type&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;a single constructor $\Rightarrow$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$*$ : the kind of &lt;strong&gt;proper types&lt;/strong&gt; (or ground types, the sorts of type expressions that are actually used to classify terms), like $Bool,\ Nat\to Nat,\ \forall X.X\to X$&lt;/li&gt;
&lt;li&gt;$*\Rightarrow &lt;em&gt;$ : the kind of &lt;strong&gt;type operators&lt;/strong&gt; (functions from proper types to proper types), like $\lambda X.T$ (abbreviation for $\lambda X::&lt;/em&gt;.T$)&lt;/li&gt;
&lt;li&gt;$* \Rightarrow * \Rightarrow *$ : the kind of functions from proper types to type operators&lt;/li&gt;
&lt;li&gt;$(* \Rightarrow *) \Rightarrow *$ : the kind of functions from type operators to proper types.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有$*\Rightarrow \cdots \Rightarrow *$ 这种kind的type称为type operator或者&lt;strong&gt;first-order type operator&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;而如果有$(*\Rightarrow *)$出现在某个$\Rightarrow$的左子树，这种type operator称为&lt;strong&gt;higher-order type operators&lt;/strong&gt; or &lt;strong&gt;higher-kinded type operators&lt;/strong&gt;。这个定义和higher-order function是完全一致的，别忘了type operator是type之间的function。&lt;/p&gt;
&lt;p&gt;higher-order type operator很少出现。&lt;/p&gt;
&lt;p&gt;对应的lambda calculus的例子：$\lambda_\omega$&lt;/p&gt;
&lt;h2 id=&#34;higher-rank-polymorphism&#34;&gt;Higher-rank Polymorphism&lt;/h2&gt;
&lt;p&gt;Polymorphism有很多种，higher-rank polymorphism是对于parametric polymorphism来说的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parametric polymorphism&lt;/strong&gt;允许在type中出现type variable和quantifier （如$\lambda X.t :: \forall X.T$），并在evaluation时用不同的type实例化type variable。他与&lt;strong&gt;ad-hoc polymorphism&lt;/strong&gt;的很大一个不同在于：The polymorphic functions act on different types &lt;em&gt;&lt;strong&gt;uniformly&lt;/strong&gt;&lt;/em&gt;. 这也是&lt;strong&gt;parametricity&lt;/strong&gt;(see theorem for free)的来源。&lt;/p&gt;
&lt;p&gt;一些例子：System $F$，FP中大部分语言，面向对象中的generics，C++中的template。&lt;/p&gt;
&lt;p&gt;几种分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;let-polymorphsim(prenex polymorphism)&lt;/strong&gt;: 只允许polymorphism出现在top-level let-bindings，也就是说quantifier只能出现在最外层，因此type variables只能instantiate成quntifier-free type。又称为&lt;strong&gt;rank-1 polymorphism&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rank-2 polymorphism&lt;/strong&gt;: 把type写成语法树树，从根到任一个$\forall$ quantifier的路径不走&lt;strong&gt;两次或以上&lt;/strong&gt;$\to$节点的左边。比如$(\forall X.X\to X)\to Nat$就是走了一次。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rank-k polymorphism&lt;/strong&gt; (如上类推)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rank-n polymorphism&lt;/strong&gt;又称为&lt;strong&gt;higher-rank polymorphism&lt;/strong&gt; or impredicative (first-class) polymorphism，允许任意多次。注意到，此时我们可以将polymorphic function任意的当作参数进行传递，因此polymorphic function变成了一等公民。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Haskell支持rank-n polymorphism，&lt;code&gt;{-# LANGUAGE Rank2Types #-} {-# LANGUAGE Rank2Types #-}&lt;/code&gt;实际上就是用来开启rank-n polymorphism. 这样就可以写出&lt;code&gt;f :: (forall n. n-&amp;gt;n) -&amp;gt; (Int, Double)&lt;/code&gt;这种函数。注意它与&lt;code&gt;f :: forall n . (n-&amp;gt;n) -&amp;gt; (Int, Double)&lt;/code&gt;的区别：前者接受一个能作用于任意类型n并返回类型n的函数，后者接受的函数中n是任意一个具体的类型了。&lt;/p&gt;
&lt;p&gt;对应的lambda calculus的例子：polymorphic lambda calculus $F$ (System F)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值得注意的是，Haskell的function并不支持explicit type-level abstraction（而System F中支持），因为这会使type inference变成undecidable。Haskell的编译器会自动推断type variable应该实例化成哪个类型。&lt;/p&gt;
&lt;p&gt;在加入pragma&lt;code&gt;{-# language TypeApplications #-}&lt;/code&gt;后可以写出&lt;code&gt;idInt = id @Int&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;higher-order-polymorphism&#34;&gt;Higher-order Polymorphism&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;higher-order polymorphism&lt;/strong&gt; or &lt;strong&gt;higher-kinded polymorphism&lt;/strong&gt;也是对于parametric polymorphism来说的，就是将前两节提到的higher-kinded type与higher-rank polymorphism结合到一起，允许parametric polymorphism的type variable遍历type operator。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Ground = Int
type FirstOrder a = Maybe a  -- a is ground
type SecondOrder c = c Int   -- c is a first-order constructor
type ThirdOrder c = c Maybe  -- c is second-order
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Haskell中&lt;code&gt;fmap :: forall f. Functor f =&amp;gt; (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;，&lt;code&gt;f :: *-&amp;gt;*&lt;/code&gt;是一个type operator，所以这是个higher-order polymorphism。这个例子中只用到了rank-1 polymorphism，我们也可以写出同时用到rank-2 polymorphism和higher-order polymorphism的例子：&lt;code&gt;ret :: Monad m&#39; =&amp;gt; (forall m. Monad m =&amp;gt; a -&amp;gt; m a) -&amp;gt; a -&amp;gt; m&#39; a&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对应的lambda calculus的例子：Higher-order polymorphic lambda-calculus $F_\omega$&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;本来想写parametricity结果发现坑越来越大，于是&lt;del&gt;水点简单的东西&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;希望有时间去认真学一下他们与logic的联系。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monad是自函子范畴上的幺半群</title>
      <link>thwfhk.github.io/post/monad_is_a_monoid/</link>
      <pubDate>Sat, 22 Aug 2020 22:25:27 +0800</pubDate>
      <guid>thwfhk.github.io/post/monad_is_a_monoid/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;All told, monad is just a monoid in the category of endofunctors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连鸽两个月后终于在八月份的末尾再次更新（填坑）。&lt;/p&gt;
&lt;p&gt;寒假的时候写过一个关于“Haskell中monad与范畴论有什么联系”的文章，当时写得很&lt;del&gt;naive&lt;/del&gt;，现在了解的更多了一点，于是决定重写一下。主要参考资料是&lt;em&gt;Category Theory for Programmers&lt;/em&gt;和&lt;em&gt;Category Theory in Context&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;monads-in-haskell&#34;&gt;Monads in Haskell&lt;/h2&gt;
&lt;p&gt;首先回顾一下Haskell中的monad。&lt;/p&gt;
&lt;p&gt;Haskell中的Monad &lt;code&gt;m&lt;/code&gt;是一个typeclass，他本身是一个函子（因此&lt;code&gt;m :: * -&amp;gt; *&lt;/code&gt;），带有一些满足特殊性质的运算。&lt;/p&gt;
&lt;p&gt;在Haskell中对monad有三种等价的定义，分别使用fish, bind, join配合return.&lt;/p&gt;
&lt;h3 id=&#34;fish&#34;&gt;fish🐟&lt;/h3&gt;
&lt;p&gt;对于category $C$和endofunctor $m$，我们可以将a到b的morphisms换成$a\to m\ b$的函数（这样的函数称为&lt;strong&gt;Kleisli arrows&lt;/strong&gt;）， 若可以定义满足条件的composition和identity morphism，得到的新范畴就是$C$对应的&lt;strong&gt;Kleisli category&lt;/strong&gt; $K$ ，此时称$m$是一个&lt;strong&gt;monad&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在haskell中是这样定义的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;class Monad m where
	(&amp;gt;=&amp;gt;) :: (a -&amp;gt; m b) -&amp;gt; (b -&amp;gt; m c) -&amp;gt; (a -&amp;gt; m c) 
	return :: a -&amp;gt; m a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意到&lt;code&gt;&amp;gt;=&amp;gt;&lt;/code&gt;(fish operator)就是composition，&lt;code&gt;return&lt;/code&gt;是identity morphism（的polymorphic版本）。&lt;/p&gt;
&lt;p&gt;此时monad laws反应的就是Kleisli category对composition的要求：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;return &amp;gt;=&amp;gt; f = f -- left unit
f &amp;gt;=&amp;gt; return = f -- right unit
(f &amp;gt;=&amp;gt; g) &amp;gt;=&amp;gt; h = f &amp;gt;=&amp;gt; (g &amp;gt;=&amp;gt; h) -- associativity 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bind&#34;&gt;bind&lt;/h3&gt;
&lt;p&gt;观察到&lt;code&gt;&amp;gt;=&amp;gt;&lt;/code&gt;第一步必定是将&lt;code&gt;a -&amp;gt; m b&lt;/code&gt;作用于a，因此可以将第一个&lt;code&gt;a -&amp;gt; m b&lt;/code&gt;换成&lt;code&gt;m b&lt;/code&gt;，简化得到&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;（bind），这是haskell中标准的monad的定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;class Monad m where
	(&amp;gt;&amp;gt;=) :: m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b 
	return :: a -&amp;gt; m a
(&amp;gt;&amp;gt;) :: m a -&amp;gt; m b -&amp;gt; m b
m &amp;gt;&amp;gt; k = m &amp;gt;&amp;gt;= (\_ -&amp;gt; k)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直观上，bind将一个有context的value给了一个&lt;code&gt;a -&amp;gt; m b&lt;/code&gt;类型的函数，他提供了一种“从context里拿出值”的方法。&lt;/p&gt;
&lt;p&gt;与fish互相表示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;f &amp;gt;=&amp;gt; g = \x -&amp;gt; f x &amp;gt;&amp;gt;= g
x &amp;gt;&amp;gt;= f = ((\_ -&amp;gt; x) &amp;gt;=&amp;gt; f) () -- one possible version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以将fish表示的monad laws转换为等价的bind表示的monad laws：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;return x &amp;gt;&amp;gt;= f = f x
mx &amp;gt;&amp;gt;= return = mx
(mx &amp;gt;&amp;gt;= f) &amp;gt;&amp;gt;= g = mx &amp;gt;&amp;gt;= (\x -&amp;gt; f x &amp;gt;&amp;gt;= g)
-- 或者写成(m &amp;gt;&amp;gt;= \x -&amp;gt; f x) &amp;gt;&amp;gt;= g = m &amp;gt;&amp;gt;= (\x -&amp;gt; f x &amp;gt;&amp;gt;= g)更清楚一点
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;join&#34;&gt;join&lt;/h3&gt;
&lt;p&gt;观察到我们可以借助&lt;code&gt;fmap&lt;/code&gt;来应用函数f，因此只要一个&lt;code&gt;join :: m(m a) -&amp;gt; m a&lt;/code&gt;就可以实现bind的功能：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;class Functor m =&amp;gt; Monad m where
    join :: m (m a) -&amp;gt; m a
    return :: a -&amp;gt; m a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;与bind互相表示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;x &amp;gt;&amp;gt;= f = join (fmap f x)
join x = x &amp;gt;&amp;gt;= id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;join表示的monad laws在下文中会从Category Theory中对$\eta,\mu$的要求中推出，可以验证这两条和之前的monad laws等价。&lt;/p&gt;
&lt;h3 id=&#34;do-notation&#34;&gt;do notation&lt;/h3&gt;
&lt;p&gt;do实际上是一个syntactic sugar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;do {x1 &amp;lt;- m1; x2 &amp;lt;- m2; f x1 x2} =
m1 &amp;gt;&amp;gt;= \x1 -&amp;gt; m2 &amp;gt;&amp;gt;= \x2 -&amp;gt; f x1 x2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以类似命令式来写函数式。&lt;/p&gt;
&lt;p&gt;上述monad laws用do notation表示的话就是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;do {x&#39; &amp;lt;- return x; return x&#39;} = do {f x}
do {x &amp;lt;- mx; return x} = do {mx}
do {y &amp;lt;- do {x &amp;lt;- mx; f x}; g y} = do {x &amp;lt;- mx; y &amp;lt;- f x; g y}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;monads-in-category-theory&#34;&gt;Monads in Category Theory&lt;/h2&gt;
&lt;p&gt;在Category Theory中，monad的形式化定义如下：&lt;/p&gt;
&lt;p&gt;[Def] A &lt;strong&gt;monad&lt;/strong&gt; on a category $C$ consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an endofunctor $T:C\to C$&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;multiplication&lt;/strong&gt; natural transformation $\mu : T^2 \Rightarrow T$&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;unit&lt;/strong&gt; natural transformation $\eta : 1_C\Rightarrow T$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coherence conditions: the following diagrams commute&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;thwfhk.github.io/images/monad/monad diagram.png&#34; alt=&#34;截屏2020-08-18 下午8.40.09&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们假设Haskell有一个Hask范畴（objects是type，morphims是functions）的话，Haskell中的monad就是Hask范畴上的monad，其中&lt;code&gt;return&lt;/code&gt;就是$\eta$，&lt;code&gt;join&lt;/code&gt;就是$\mu$（准确的说是components $\eta_a,\mu_a$的polymorphic版本），他们需要满足的monad laws就是$\eta,\mu$的两个图交换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mu \circ T \mu  = \mu \circ \mu T$ :  &lt;code&gt;join . fmap (join) = join . join&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;$\mu \circ T \eta = \mu \circ \eta T = 1_T$  : &lt;code&gt;join . fmap (unit) = join . unit = id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然$\eta,\mu$还要满足作为自然变换的coherence conditions，不过这两个条件由于&lt;em&gt;&lt;strong&gt;Theorems for Free&lt;/strong&gt;&lt;/em&gt;而自动满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;return . f = fmap f . return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join . fmap (fmap f) = fmap f . join&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以Haskell中的monad与Category Theory中的monad是一致的，接下来只要解释Category Theory中monad为什么是a monoid in the endofunctor category. 我们需要先补充一些Category Theory中的概念。&lt;/p&gt;
&lt;h2 id=&#34;monoid-and-monoidal-category&#34;&gt;Monoid and Monoidal Category&lt;/h2&gt;
&lt;h3 id=&#34;monoid&#34;&gt;Monoid&lt;/h3&gt;
&lt;p&gt;经典的monoid（幺半群）是在集合上定义的，人如其名，有乘法运算和单位元。&lt;/p&gt;
&lt;p&gt;[Def] A &lt;strong&gt;monoid&lt;/strong&gt; is an object $M\in Set$ together with two morphisms $\mu : M\times M\to M$ and $\eta :1\to M$.&lt;/p&gt;
&lt;p&gt;Coherence conditions: the following diagrams commute&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;thwfhk.github.io/images/monad/monoid diagram.png&#34; alt=&#34;截屏2020-08-18 上午10.27.32&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个定义和抽象代数中是等价的，$\mu$给出了一个二元运算并满足结合律（图1），$\eta$给出了一个单位元（图2）。&lt;/p&gt;
&lt;p&gt;我们可以把monoid从Set上&lt;em&gt;&lt;strong&gt;推广到其他category上&lt;/strong&gt;&lt;/em&gt;，能在上面定义monoid的category需要满足一定条件，称为monoidal category。&lt;/p&gt;
&lt;h3 id=&#34;monoidal-category&#34;&gt;Monoidal Category&lt;/h3&gt;
&lt;p&gt;直观上，要想在一个category上定义monoid，这个category需要有一个objects之间的&lt;em&gt;&lt;strong&gt;product&lt;/strong&gt;&lt;/em&gt;，还要能从每个objects中拿出一个unit element。我们不能从category的objects里拿东西，但可以利用terminal object到其他objects的映射来取单位元，所以这个category要有一个类似&lt;em&gt;&lt;strong&gt;terminal object&lt;/strong&gt;&lt;/em&gt;的东西。。&lt;/p&gt;
&lt;p&gt;monoidal category的形式化定义如下：&lt;/p&gt;
&lt;p&gt;[Def] A &lt;strong&gt;symetric monoidal category&lt;/strong&gt;$(V,\otimes,*)$ is a category $V$ together with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;em&gt;&lt;strong&gt;bifunctor&lt;/strong&gt;&lt;/em&gt; $-\otimes-:V\times V\to V$ called &lt;strong&gt;monoidal product&lt;/strong&gt; (or tensor product)&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;unit object&lt;/strong&gt; $*$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coherence conditions: three coherence natural isomorphisms&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;thwfhk.github.io/images/monad/monoidal cat.png&#34; alt=&#34;截屏2020-08-18 上午10.31.38&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Remarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注意$\alpha$这些natural isomorphisms是multifunctors之间的，他的components是$\alpha_{u,v,w}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三个coherence conditions分别是symetric, associativity, unit conditions on the monoidal product. 只满足后两个的话称为&lt;strong&gt;monoidal category&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果这些natural isomorphisms可以取identity natural isomorphisms的话，称为&lt;strong&gt;strict monoidal category&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All categories with ﬁnite products such as $(Set,\times, * ), (Top,\times,*),(Cat,\times,1)$, where the monoidal unit in each case is the terminal object. 对偶地，finite coproduct和initial object也构成symmetric monoidal category，如$(Set,+,{})$.&lt;/li&gt;
&lt;li&gt;Hask范畴可以近似看成Set，因此product（coproduct）在同构意义下满足条件，terminal object是&lt;code&gt;()&lt;/code&gt;（&lt;code&gt;Empty&lt;/code&gt;），因此Hask是monoidal category。&lt;/li&gt;
&lt;li&gt;A commutative monoid看作discrete category(即只有identity morphisms)的话也定义了一个symetric monoidal category，此时natural isomorphisms就是identities。另一方面，经典的monoid就是Set上的monoid。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monoid-in-a-monoidal-category&#34;&gt;Monoid in a Monoidal Category&lt;/h3&gt;
&lt;p&gt;在monoidal category$(V,\otimes,*)$上定义monoid，我们需要取一个object $M\in V$以及两个morphisms $\mu : M\otimes M\to M$, $\eta : * \to M$. Coherence conditions和经典monoid相同。&lt;/p&gt;
&lt;h2 id=&#34;monad-as-a-monoid&#34;&gt;Monad as a Monoid&lt;/h2&gt;
&lt;p&gt;终于来到了正题。实际上经过前面的铺垫，剩下的内容就很简单了：&lt;/p&gt;
&lt;p&gt;我们考虑&lt;strong&gt;functor category $C^C$&lt;/strong&gt;，它的objects是functors，morphisms是natural transformations。它是一个&lt;em&gt;&lt;strong&gt;strict monoidal category&lt;/strong&gt;&lt;/em&gt;，monoidal product是&lt;em&gt;composition between functors&lt;/em&gt;，unit object是identity endofunctor。注意此时composition(一般省略运算符) $-\circ -:C^C \times C^C \to C^C$是一个bifunctor，它是可以作用于natural transformation的，作用效果就是natural transformation的&lt;em&gt;&lt;strong&gt;horizontal composition&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;那么$C^C$上的monoid是什么样的呢？取object $T\in C^C$，morphisms $\mu,\eta\in C^C$满足条件。 $T$就是一个monad！所以&lt;em&gt;A monad on $C$ is a monoid in the monoidal category $C^C$ of endofunctors on $C$&lt;/em&gt;. Bingo!&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;其实这篇文章一点也不友好，&lt;del&gt;只能作为给自己看的复习笔记&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;monad相关还有好多有趣的内容，比如comonad、adjunctions等等，&lt;del&gt;有时间一定写&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;希望以后多更新一点有趣的东西（喂至少做到月更啊&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何用Haskell写一棵红黑树</title>
      <link>thwfhk.github.io/post/haskell_red_black_tree/</link>
      <pubDate>Tue, 11 Feb 2020 15:31:46 +0800</pubDate>
      <guid>thwfhk.github.io/post/haskell_red_black_tree/</guid>
      <description>&lt;p&gt;Candy?在上学期的数算课上学了红黑树，但是他一直没写过。&lt;/p&gt;
&lt;p&gt;最近他入门了一下Haskell，得知用Haskell可以很方便实现各种树结构，于是就去学了一下如何用Haskell写红黑树，发现只要不到60行！（包括空行和类型签名）&lt;/p&gt;
&lt;p&gt;下面是一个简单的小教程。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;PS: 其实下面的算法和数算学的那个一点关系都没有&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;定义类型&#34;&gt;定义类型&lt;/h2&gt;
&lt;p&gt;和普通二叉树一样哒，只不过加上了一个颜色信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Tree a = Nil | Node Color (Tree a) a (Tree a) deriving (Show, Eq)
data Color = R | B deriving (Show, Eq)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;辅助函数&#34;&gt;辅助函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将树根染黑：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;makeBlack :: Tree a -&amp;gt; Tree a
makeBlack Nil = Nil
makeBlack (Node _ l x r) = Node B l x r
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;将树根染红：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;makeRed :: Tree a -&amp;gt; Tree a
makeRed Nil = Nil
makeRed (Node _ l x r) = Node R l x r
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;插入操作&#34;&gt;插入操作&lt;/h2&gt;
&lt;p&gt;一般的红黑树插入不太方便用纯函数式来写，&lt;em&gt;Okasaki在1999年提出了一种新的插入方法&lt;/em&gt;，将插入统一为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先默认插入红色节点，然后从下向上进行balance操作；&lt;/li&gt;
&lt;li&gt;balance操作会处理&lt;strong&gt;当前子树的children和grandchildren&lt;/strong&gt;出现双红的情况，并且会&lt;strong&gt;将当前子树的根变红&lt;/strong&gt;（balance操作并不会改变rank）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;插入操作的框架很简单，需要注意的是最后要让整棵树的根变黑：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;insert :: (Ord a) =&amp;gt; a -&amp;gt; Tree a -&amp;gt; Tree a
insert x = makeBlack . ins 
  where ins Nil = Node R Nil x Nil
        ins t@(Node c l y r) | x &amp;lt; y     = balance $ Node c (ins l) y r
                             | x &amp;gt; y     = balance $ Node c l y (ins r)
                             | otherwise = t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;balance操作要处理四种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;thwfhk.github.io/images/haskell_rbt/rbt1.jpg&#34; alt=&#34;rbt1&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以方便的用pattern matching来实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;balance :: Tree a -&amp;gt; Tree a
balance (Node B (Node R (Node R a x b) y c) z d) = Node R (Node B a x b) y (Node B c z d)
balance (Node B (Node R a x (Node R b y c)) z d) = Node R (Node B a x b) y (Node B c z d)
balance (Node B a x (Node R (Node R b y c) z d)) = Node R (Node B a x b) y (Node B c z d)
balance (Node B a x (Node R b y (Node R c z d))) = Node R (Node B a x b) y (Node B c z d)
balance t@(Node c x l r) = t
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;删除操作&#34;&gt;删除操作&lt;/h2&gt;
&lt;p&gt;插入操作只要处理“双红”，删除操作还要处理“黑色节点数相等”，比较麻烦。&lt;/p&gt;
&lt;p&gt;这里采用了&lt;em&gt;Stefan Kahrs在2001年提出的方法&lt;/em&gt;，主要特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不&lt;/strong&gt;将待删除节点与后继交换&lt;/li&gt;
&lt;li&gt;维持一个&lt;strong&gt;新的invariant&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;从黑根子树中删除节点，该子树高度会-1&lt;/li&gt;
&lt;li&gt;从红根子树中删除节点，该子树高度不变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们有balanceL和balanceR两个操作，分别处理“左子树比右子树短1”和“右子树比左子树短1”的情况，将整棵树的高度变成&lt;strong&gt;较短&lt;/strong&gt;那个的状态。&lt;/p&gt;
&lt;p&gt;删除操作的框架如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;delete :: Ord a =&amp;gt; a -&amp;gt; Tree a -&amp;gt; Tree a
delete x = makeBlack . del
  where
    del Nil = Nil
    del t@(Node _ l y r) | x &amp;lt; y     = delL t
                         | x &amp;gt; y     = delR t
                         | otherwise = app l r
    delL (Node _ l@(Node B _ _ _) y r) = balanceL $ Node B (del l) y r
    delL (Node _ l y r)                = Node R (del l) y r
    delR (Node _ l y r@(Node B _ _ _)) = balanceR $ Node B l y (del r)
    delR (Node _ l y r)                = Node R l y (del r)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以待插入节点将插入左子树为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前节点y的左子树为黑根时，会在删除后将y染黑并进行balanceL操作&lt;/li&gt;
&lt;li&gt;当前节点y的左子树为红根时，会在删除后将y染红&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;容易发现，这样操作是可以维持新的invariant的（枚举当前节点颜色情况证明即可）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;由于delete中在balanceL/R之前会染黑，balanceL/R只要处理根为黑的情况即可，有三种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;thwfhk.github.io/images/haskell_rbt/rbt2.jpg&#34; alt=&#34;rbt2&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样用pattern matching来实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;balanceL :: Tree a -&amp;gt; Tree a 
balanceL (Node B (Node R a x b) y r) = Node R (Node B a x b) y r
balanceL (Node B l y (Node B a z b)) = balance $ Node B l y (Node R a z b)
balanceL (Node B l y (Node R (Node B a u b) z c)) = Node R (Node B l y a) u (balance $ Node B b z (makeRed c))

balanceR :: Tree a -&amp;gt; Tree a 
balanceR (Node B l y (Node R a x b)) = Node R l y (Node B a x b)
balanceR (Node B (Node B a z b) y r) = balance $ Node B (Node R a z b) y r
balanceR (Node B (Node R c z (Node B a u b)) y r) = Node R (balance $ Node B (makeRed c) z a) u (Node B b y r)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;app会合并两个子树，有三种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;thwfhk.github.io/images/haskell_rbt/rbt3.jpg&#34; alt=&#34;rbt3&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样用pattern matching来实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;app :: Tree a -&amp;gt; Tree a -&amp;gt; Tree a
app Nil t = t
app t Nil = t 
app (Node R a x b) (Node R c y d) = 
  case app b c of
    Node R b&#39; z c&#39; -&amp;gt; Node R (Node R a x b&#39;) z (Node R c&#39; y d)
    s -&amp;gt; Node R a x (Node R s y d)
app (Node B a x b) (Node B c y d) =
  case app b c of
    Node r b&#39; z c&#39; -&amp;gt; Node R (Node B a x b&#39;) z (Node B c&#39; y d)
    s -&amp;gt; balanceL $ Node B a x (Node B s y d)
app (Node R a x b) t = Node R a x (app b t)
app t (Node R a x b) = Node R (app t a) x b
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;完整代码&lt;/h2&gt;
&lt;p&gt;只要60行！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Tree a = Nil | Node Color (Tree a) a (Tree a) deriving (Show, Eq)
data Color = R | B deriving (Show, Eq)

makeBlack :: Tree a -&amp;gt; Tree a
makeBlack Nil = Nil
makeBlack (Node _ l x r) = Node B l x r

makeRed :: Tree a -&amp;gt; Tree a
makeRed Nil = Nil
makeRed (Node _ l x r) = Node R l x r

insert :: (Ord a) =&amp;gt; a -&amp;gt; Tree a -&amp;gt; Tree a
insert x = makeBlack . ins 
  where ins Nil = Node R Nil x Nil
        ins t@(Node c l y r) | x &amp;lt; y     = balance $ Node c (ins l) y r
                             | x &amp;gt; y     = balance $ Node c l y (ins r)
                             | otherwise = t

balance :: Tree a -&amp;gt; Tree a
balance (Node B (Node R (Node R a x b) y c) z d) = Node R (Node B a x b) y (Node B c z d)
balance (Node B (Node R a x (Node R b y c)) z d) = Node R (Node B a x b) y (Node B c z d)
balance (Node B a x (Node R (Node R b y c) z d)) = Node R (Node B a x b) y (Node B c z d)
balance (Node B a x (Node R b y (Node R c z d))) = Node R (Node B a x b) y (Node B c z d)
balance t@(Node c x l r) = t

delete :: Ord a =&amp;gt; a -&amp;gt; Tree a -&amp;gt; Tree a
delete x = makeBlack . del
  where
    del Nil = Nil
    del t@(Node _ l y r) | x &amp;lt; y     = delL t
                         | x &amp;gt; y     = delR t
                         | otherwise = app l r
    delL (Node _ l@(Node B _ _ _) y r) = balanceL $ Node B (del l) y r
    delL (Node _ l y r)                = Node R (del l) y r
    delR (Node _ l y r@(Node B _ _ _)) = balanceR $ Node B l y (del r)
    delR (Node _ l y r)                = Node R l y (del r)

balanceL :: Tree a -&amp;gt; Tree a 
balanceL (Node B (Node R a x b) y r) = Node R (Node B a x b) y r
balanceL (Node B l y (Node B a z b)) = balance $ Node B l y (Node R a z b)
balanceL (Node B l y (Node R (Node B a u b) z c)) = Node R (Node B l y a) u (balance $ Node B b z (makeRed c))

balanceR :: Tree a -&amp;gt; Tree a 
balanceR (Node B l y (Node R a x b)) = Node R l y (Node B a x b)
balanceR (Node B (Node B a z b) y r) = balance $ Node B (Node R a z b) y r
balanceR (Node B (Node R c z (Node B a u b)) y r) = Node R (balance $ Node B (makeRed c) z a) u (Node B b y r)

app :: Tree a -&amp;gt; Tree a -&amp;gt; Tree a
app Nil t = t
app t Nil = t 
app (Node R a x b) (Node R c y d) = 
  case app b c of
    Node R b&#39; z c&#39; -&amp;gt; Node R (Node R a x b&#39;) z (Node R c&#39; y d)
    s -&amp;gt; Node R a x (Node R s y d)
app (Node B a x b) (Node B c y d) =
  case app b c of
    Node r b&#39; z c&#39; -&amp;gt; Node R (Node B a x b&#39;) z (Node B c&#39; y d)
    s -&amp;gt; balanceL $ Node B a x (Node B s y d)
app (Node R a x b) t = Node R a x (app b t)
app t (Node R a x b) = Node R (app t a) x b
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;其他api&#34;&gt;其他API&lt;/h2&gt;
&lt;p&gt;一些其他常规操作的API：序列和树之间转换、查找、求后继&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;tree2List :: Tree a -&amp;gt; [a]
tree2List Nil = []
tree2List (Node c l x r) = tree2List l ++ [x] ++ tree2List r

list2Tree :: Ord a =&amp;gt; [a] -&amp;gt; Tree a
list2Tree = foldl (flip insert) Nil 

search :: (Ord a) =&amp;gt; a -&amp;gt; Tree a -&amp;gt; Bool
search _ Nil = False
search x (Node _ l y r) 
  | x == y    = True
  | x &amp;lt; y     = search x l
  | otherwise = search x r

successor :: Ord a =&amp;gt; a -&amp;gt; Tree a -&amp;gt; a
successor x Nil = x
successor x (Node _ l y r) 
  | x &amp;lt;  y = let t = successor x l in if x == t then y else t
  | x &amp;gt;= y = successor x r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PS：因为没有维护size信息所以没法求第k小QwQ，不过加上size信息应该也不难写。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://abhiroop.github.io/Haskell-Red-Black-Tree/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一篇讲的很好的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.kent.ac.uk/people/staff/smk/redblack/Untyped.hs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一份代码实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kahrs, Stefan. (2001). Red-black trees with types. Journal of Functional Programming. 11. 10.1017/S0956796801004026.&lt;/li&gt;
&lt;li&gt;另外，Matt Might提出了一种更加简洁的删除操作的实现，详情参阅&lt;a href=&#34;http://matt.might.net/articles/red-black-delete/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;他的博客&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
